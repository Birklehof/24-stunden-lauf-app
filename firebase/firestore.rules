rules_version = '2';

function hasRole(app, role) {
	return request.auth != null &&
  			request.auth.token.email != null &&
  			request.auth.token.email != "" &&
        exists(/databases/(default)/documents/apps/$(app)/roles/$(request.auth.token.email)) &&
        get(/databases/(default)/documents/apps/$(app)/roles/$(request.auth.token.email)).data.role == role;
}

function isValidEmail(email) {
	return email is string && email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,5}$')
}

function isValidPermission(email) {
	return isValidEmail(email) && request.resource.data.role is string
}

function isValidLap() {
	return request.resource.data.runnerId is string &&
  			request.resource.data.timestamp is timestamp &&
  			exists(/databases/(default)/documents/apps/24-stunden-lauf/runners/$(request.resource.data.runnerId))
}

function isValidRunner() {
	return request.resource.data.name is string &&
  			request.resource.data.number is number;
}

service cloud.firestore {
  match /databases/(default)/documents {
  	match /apps/24-stunden-lauf {
      match /laps/{lap} {
        allow delete: if request.auth.token.role == 'assistant' || hasRole("administration", "admin")
				allow read: if request.auth != null;
      }
      
      match /runners/{runner} {
				allow delete: if hasRole("administration", "admin")
    		allow create: if hasRole("administration", "admin") && isValidRunner()
    		allow create: if request.auth.token.role == 'assistant' && isValidRunner()
				allow read: if request.auth != null;
    	}

			match /roles/{role} {
    		allow delete: if hasRole("administration", "admin")
    		allow write: if hasRole("administration", "admin") && isValidPermission(role)
				allow read: if request.auth != null;
    	}

			match /archive/{archive} {
        allow delete: if hasRole("administration", "admin")
				allow read: if request.auth != null;

				match /runners/{runner} {
    			// allow create: if hasRole("administration", "admin") && isValidRunner()
					allow read: if request.auth != null;
    		}

				match /laps/{lap} {
        	// allow create: if hasRole("administration", "admin") && isValidLap()
					allow read: if request.auth != null;
      	}
      }
    }

		match /apps/{app} {
			allow read: if request.auth != null;

			match /roles/{role} {
    		allow delete: if hasRole("administration", "admin")
    		allow write: if hasRole("administration", "admin") && isValidPermission(role)
				allow read;
    	}
		}
    
    match /students/{student} {
			allow write, delete: if hasRole("administration", "admin")
    	allow read: if request.auth != null;
    }
    
    match /staff/{staff} {
    	allow write, delete: if hasRole("administration", "admin")
			allow read: if request.auth != null;
		}
  }
}